import numpy as np
import pickle
import matplotlib.pyplot as plt
from operator import itemgetter, attrgetter
import copy


def boxplot_tfs(data1,data2,labels,save):

    """

    Description:

        Generate side-by side boxplots for comparison + a scatter plot (dots aligned with boxplots), two y-axes are generated.

    Arguments: 

        data1       # list of lists, where each nested list is a vetor that is input for a boxplot 
        data2       # list of y-axis ticks for a scatterplot 
        labels      # 

    Usage:

    ...

    """


    positions = np.array(xrange(len(data1)))*2.0-0.4   # original

    f = plt.figure()


    ################################################
    # First Y-axis: number of TFs present
    ################################################

    ax = f.add_subplot(111) # plotting the first y-axis to the left: TF counts

    def set_box_color(bp, color):
        plt.setp(bp['boxes'], color=color)
        plt.setp(bp['whiskers'], color=color)
        plt.setp(bp['caps'], color=color)
        plt.setp(bp['medians'], color=color)

    bpl = ax.boxplot(data1, positions=positions, sym='', widths=0.6)

    plt.plot((min(positions), max(positions)), (70, 70), 'k-') # draw horiztonal line representing "AA %id inference threshold in Rob's cell paper: "http://www.sciencedirect.com/science/article/pii/S0092867414010368" ax_getylim() returns <<(0.0, 100.0)>> 

    set_box_color(bpl, '#D7191C') # colors are from http://colorbrewer2.org/

    # draw temporary red and blue lines and use them to create a legend
    ax.plot([], c='#D7191C')
    plt.xlabel('Transcription Factor OG (VB Gene Id)')
    plt.ylabel('AA sequence similarity within OG (%id)')
    plt.title('Comparing AA sequence similarities within various Transcription Factor OGs')

    # x tick labels changed to AGAP ids 
    locs, dlabels    = plt.xticks() # @boxticks
    plt.xticks(locs, labels)  
    plt.xticks(rotation=90)

    ax.yaxis.tick_right()

    #plt.ylim((0,800))

    ################################################
    # Second Y-axis: Boxplots of %id OG TFs
    ################################################

    ax2 = ax.twinx() # second y-axis

    spl = ax2.scatter(positions,np.array(data2),color='b') # using the x-axis ticks as individual TF AGAPs

    plt.xlabel('Transcription Factor OG (VB Gene Id)')
    plt.ylabel('Number of Transcription Factors in OG')

    plt.xticks(locs, labels) # the forces the xticks to be consistent with the boxllot's y-axis see: ctrl+f: @boxticks
    plt.xticks(rotation=90) # @ANDY


    #############################
    # Final Plot Configurations
    #############################

    #plt.gca().set_ylim([xmin,xmax])
    #plt.ylim((0,100))
    plt.gca().set_xlim([min(positions)-1,max(positions)+1]) # compacts the figure better, otherwise there are usually big white spaces padding the y-axes

    #plt.show()
    plt.gcf().subplots_adjust(bottom=0.15) # allows xticklabels to fit into the borders of the plot
    plt.gcf().set_size_inches(19.5,10.5)  # resize the plot to make it pretty

    plt.savefig(save,dpi=300)
    plt.close()

    return locs, dlabels, ax2, spl, np.array(data2), positions, bpl, ax

################################################################################################
#
#   Main Script 
#
################################################################################################


paralogues = True  # a switch that determines whether OGs that are plotted should contain paralogues or not

# Is the data already generated?

    # Yes: then load it
try:

    f = open( './data_in_transcription_factor_OG_boxplots.p' )
    print 'Loading bitscoreVecs data structure, please wait a dozen or so seconds...'
    bitscoreVecs,bitscoreVecs_noZeros = pickle.load( f )
    f.close()

    # No: then generate it
except IOError as detail:

    print detail 
    # found transcription factor Anopheles gambiae gene ids using Biomart, filtered with Go term: 
    transcription_factor_agIds = ['AGAP000114','AGAP010777','AGAP010777','AGAP008935','AGAP008935','AGAP004693','AGAP004693','AGAP004696','AGAP004696','AGAP005010','AGAP005010','AGAP005011','AGAP005011','AGAP005041','AGAP005041','AGAP005096','AGAP005096','AGAP005099','AGAP005099','AGAP005137','AGAP005137','AGAP005138','AGAP005138','AGAP005300','AGAP005300','AGAP005300','AGAP005300','AGAP005300','AGAP005300','AGAP005311','AGAP005311','AGAP005346','AGAP005346','AGAP005362','AGAP005362','AGAP005437','AGAP005437','AGAP005878','AGAP005878','AGAP005878','AGAP005878','AGAP005655','AGAP005655','AGAP005661','AGAP005661','AGAP005661','AGAP005661','AGAP005711','AGAP005711','AGAP005719','AGAP005719','AGAP005727','AGAP005727','AGAP005755','AGAP005755','AGAP005755','AGAP005755','AGAP005804','AGAP005804','AGAP005895','AGAP005895','AGAP005896','AGAP005896','AGAP005902','AGAP005902','AGAP005903','AGAP005903','AGAP005903','AGAP005903','AGAP006376','AGAP006376','AGAP006376','AGAP006376','AGAP006386','AGAP006386','AGAP006386','AGAP006386','AGAP007035','AGAP006536','AGAP006536','AGAP006537','AGAP006537','AGAP006540','AGAP006540','AGAP006571','AGAP006571','AGAP006642','AGAP006642','AGAP006747','AGAP006747','AGAP006786','AGAP006786','AGAP006923','AGAP006923','AGAP007018','AGAP007018','AGAP007058','AGAP007058','AGAP007170','AGAP007170','AGAP007171','AGAP007171','AGAP007327','AGAP007327','AGAP007327','AGAP007327','AGAP007376','AGAP007376','AGAP007539','AGAP007539','AGAP001187','AGAP001187','AGAP001880','AGAP001880','AGAP013075','AGAP013075','AGAP001978','AGAP001978','AGAP013178','AGAP013178','AGAP002035','AGAP002035','AGAP002095','AGAP002095','AGAP002095','AGAP002095','AGAP002095','AGAP002095','AGAP002095','AGAP002095','AGAP002155','AGAP002155','AGAP002155','AGAP002155','AGAP002172','AGAP002172','AGAP002178','AGAP002178','AGAP002234','AGAP002234','AGAP002235','AGAP002235','AGAP002238','AGAP002238','AGAP002238','AGAP002238','AGAP002236','AGAP002236','AGAP001269','AGAP001269','AGAP001269','AGAP001269','AGAP002352','AGAP002352','AGAP002352','AGAP002352','AGAP002372','AGAP002372','AGAP002431','AGAP002431','AGAP002460','AGAP002460','AGAP013297','AGAP013297','AGAP002506','AGAP002506','AGAP002544','AGAP002544','AGAP002544','AGAP002544','AGAP002487','AGAP002487','AGAP002741','AGAP002741','AGAP002902','AGAP002902','AGAP002903','AGAP002903','AGAP013394','AGAP001348','AGAP001348','AGAP001344','AGAP001344','AGAP003406','AGAP003406','AGAP013485','AGAP013485','AGAP013299','AGAP013299','AGAP003574','AGAP003574','AGAP001389','AGAP001389','AGAP001388','AGAP001388','AGAP003669','AGAP003669','AGAP003670','AGAP003670','AGAP003671','AGAP003671','AGAP003672','AGAP003672','AGAP003674','AGAP003674','AGAP003726','AGAP003726','AGAP003871','AGAP003871','AGAP003871','AGAP003871','AGAP003940','AGAP003940','AGAP013032','AGAP013032','AGAP004050','AGAP004050','AGAP004050','AGAP004050','AGAP004050','AGAP004050','AGAP004050','AGAP004050','AGAP004050','AGAP004050','AGAP004178','AGAP004178','AGAP004224','AGAP004224','AGAP004228','AGAP004228','AGAP001483','AGAP001483','AGAP001464','AGAP001464','AGAP001464','AGAP001464','AGAP004319','AGAP004319','AGAP004341','AGAP004341','AGAP004337','AGAP004337','AGAP001495','AGAP001495','AGAP004646','AGAP004646','AGAP004647','AGAP004647','AGAP004648','AGAP004648','AGAP004649','AGAP004649','AGAP004659','AGAP004659','AGAP013157','AGAP013157','AGAP004660','AGAP004660','AGAP004660','AGAP004660','AGAP004661','AGAP004661','AGAP004661','AGAP004661','AGAP001536','AGAP001536','AGAP004664','AGAP004664','AGAP001560','AGAP001560','AGAP001577','AGAP001577','AGAP001593','AGAP001593','AGAP001619','AGAP001619','AGAP001618','AGAP001618','AGAP001671','AGAP001671','AGAP001743','AGAP001743','AGAP001761','AGAP001761','AGAP004662','AGAP004662','AGAP004662','AGAP004662','AGAP004662','AGAP004662','AGAP004541','AGAP004541','AGAP000569','AGAP000569','AGAP000569','AGAP000569','AGAP000067','AGAP000067','AGAP000068','AGAP000068','AGAP000069','AGAP000069','AGAP000662','AGAP000662','AGAP000662','AGAP000662','AGAP000662','AGAP000662','AGAP000773','AGAP000773','AGAP000779','AGAP000779','AGAP000779','AGAP000779','AGAP000819','AGAP000819','AGAP000858','AGAP000858','AGAP000874','AGAP000874','AGAP000875','AGAP000875','AGAP000114','AGAP000114','AGAP013373','AGAP013373','AGAP001093','AGAP001093','AGAP001094','AGAP001094','AGAP000190','AGAP000190','AGAP000215','AGAP000215','AGAP000237','AGAP000237','AGAP000431','AGAP000431','AGAP000061','AGAP000061','AGAP000063','AGAP000063','AGAP000058','AGAP000058','AGAP013275','AGAP013275','AGAP000441','AGAP000441','AGAP000484','AGAP000484','AGAP000488','AGAP000488','AGAP000512','AGAP000512','AGAP000512','AGAP000512','AGAP000528','AGAP000528','AGAP013287','AGAP013287','AGAP012976','AGAP012976','AGAP000099','AGAP000099','AGAP010623','AGAP010623','AGAP010686','AGAP010686','AGAP010777','AGAP010777','AGAP011038','AGAP011038','AGAP011065','AGAP011065','AGAP011067','AGAP011067','AGAP011082','AGAP011082','AGAP011096','AGAP011096','AGAP011134','AGAP011134','AGAP011143','AGAP011143','AGAP011253','AGAP011253','AGAP011417','AGAP011417','AGAP011548','AGAP011548','AGAP011695','AGAP011695','AGAP011711','AGAP011711','AGAP011712','AGAP011712','AGAP011927','AGAP011927','AGAP012211','AGAP012211','AGAP012222','AGAP012222','AGAP012223','AGAP012223','AGAP012303','AGAP012303','AGAP012345','AGAP012345','AGAP010423','AGAP010423','AGAP008606','AGAP008606','AGAP009494','AGAP009494','AGAP009500','AGAP009500','AGAP009513','AGAP009513','AGAP009515','AGAP009515','AGAP009575','AGAP009575','AGAP009646','AGAP009646','AGAP009676','AGAP009676','AGAP009748','AGAP009748','AGAP009777','AGAP009777','AGAP009807','AGAP009807','AGAP009890','AGAP009890','AGAP009986','AGAP009986','AGAP009986','AGAP009986','AGAP010030','AGAP010030','AGAP010044','AGAP010044','AGAP012428','AGAP012428','AGAP012461','AGAP012461','AGAP012501','AGAP012501','AGAP012600','AGAP012600','AGAP012873','AGAP012873','AGAP012921','AGAP012921','AGAP007767','AGAP007767','AGAP008155','AGAP008155','AGAP009400','AGAP009400','AGAP010209','AGAP010209','AGAP009399','AGAP007888','AGAP007985','AGAP007985','AGAP010279','AGAP010279','AGAP008023','AGAP008023','AGAP007801','AGAP009350','AGAP027996','AGAP008935','AGAP008935','AGAP009002','AGAP009002','AGAP009002','AGAP008416','AGAP008416','AGAP008382','AGAP008979','AGAP008567','AGAP008567','AGAP009064','AGAP009064','AGAP008334','AGAP008334','AGAP009088','AGAP009088','AGAP009302','AGAP008762','AGAP008762','AGAP008762','AGAP008551','AGAP008551','AGAP008569','AGAP008569','AGAP008728','AGAP008728','AGAP009147','AGAP009147','AGAP008832','AGAP008832','AGAP008025','AGAP008025','AGAP008563','AGAP008563','AGAP008868','AGAP008868','AGAP008980','AGAP008980','AGAP009293','AGAP009293','AGAP004619','AGAP004619','AGAP011339','AGAP010478','AGAP010438','AGAP004747','AGAP010358','AGAP011341','AGAP011341','AGAP010516','AGAP010359','AGAP011954','AGAP011954','AGAP011625','AGAP004745','AGAP010333','AGAP028080','AGAP028221','AGAP010405','AGAP010405','AGAP012001','AGAP028105','AGAP005281','AGAP010375','AGAP027992','AGAP002544','AGAP002544','AGAP002544','AGAP002544','AGAP012600','AGAP012600','AGAP008334','AGAP012211','AGAP012211','AGAP006571','AGAP006571','AGAP012223','AGAP012223','AGAP009002','AGAP009002','AGAP009002'] # agaps retrieved from BioMart with: filter1: Anopheles gambiae only, filter2: GO:0003700 


    # datapaths relative to /home/ab108/0VB/2kb/scripts/stamp_to_collapsed/

    MZtoAGAMP_path      = '../../data/misc/MZtoAGAP-andy.txt'
    #MZtoAGAMP_path = '../../../../../../fastdata/users/nho/AnOrthoMap-data/output/MZtoAGAMP.txt' # some agamps are missing 
    ParalogCount_path   = '../../../../../../fastdata/users/nho/AnOrthoMap-data/output/ParalogCount.csv'
    PercAvgAll_path     = '../../../../../../fastdata/users/nho/AnOrthoMap-data/output/PercAvg(All).csv'

    # ../../../../../../fastdata/users/nho/AnOrthoMap-data/output/ParalogCount.csv

    ###########################################################################
    # Obtain the OG ids (MZ........) matching to our AG gene ids (AGAP......)
    ###########################################################################

    # MZtoAGAMP dict
    ag_to_mz = {}  # mz = ortholog family Id, ag = stable VB anopheles gambiae gene id
    mz_to_ag = {}  # mz = ortholog family Id, ag = stable VB anopheles gambiae gene id

    fi = open(MZtoAGAMP_path,'r')

    while True:
        line = fi.readline()
        if line == '':
            break
        mz,ag = line.split('\t')
        ag_to_mz[ag.replace('\r\n','')] = mz # map anopheles gambiae gene ids as keys to mz id 
        mz_to_ag[mz] = ag.replace('\r\n','') # map anopheles gambiae gene ids as keys to mz id 
    fi.close()

    transcription_factor_mzIds = [ag_to_mz[i] for i in transcription_factor_agIds] # 556
    transcription_factor_mzIds = list(set(transcription_factor_mzIds)) # remove duplicates: 556 -> 221



    ###############################################################
    # Obtain OG ids (MZ........) that do not contain paralogues
    ###############################################################

    transcription_factor_mzIds_with_no_paralogues = []  # "no paralogues": OGs cannot contain paralogues

    mz_to_pc = {}

    pclist = []

    fi = open(ParalogCount_path,'r')

    line    = fi.readline()     # first line are headers to species
    row     = line.split(',')
    species = [j.replace('\r\n','') for j in row]

    while True:

        line = fi.readline()
        
        if line == '':
            break

        row     = line.split(',')
        mz      = row[0]
        pcounts = row[1:]

        pc = [int(i.replace('\r\n','')) for i in pcounts]
        pclist.append(pc)

        mz_to_pc[mz] = pc

        #######################################
        # IS THE OG A TRANSCRIPTION FACTOR? ..#
        #######################################

        if mz in transcription_factor_mzIds:

            #########################################
            # ARE THERE NO PARALOGUES IN THIS OG? ..#
            #########################################

            # "NO PARALOGUES":
            if not len([i for i in pc if i >1])>0: # any of the genes in the OG has paralogues (i.e. if any elements are >1)
                transcription_factor_mzIds_with_no_paralogues.append(mz) #..then list it!

            # # "WITH PARALOGUES":
            # else: 
            #     transcription_factor_mzIds_with_paralogues.append(mz)
    fi.close()



    ###########################################################################
    # Obtain %ids for each of the transcription_factor_mzIds_with_no_paralogues
    ###########################################################################


        #######################
        # Read the %id data into a dictionary: whose key:value is mzId:bitscoreVec*  e.g.: ['MZ20100000'] : [100.0,81.71,80.94,85.67,84.89,51.95,85.54,86.03,85.4,85.79,85.59,85.16,84.99,63.7133333333,54.88,54.1,85.65,85.1,82.46,85.41,85.32,88.67,52.97,51.78,54.7,56.28,81.71,100.0,93.71,94.85,94.43,93.03,98.47,94.69,94.73,94.87,94.83,94.62,88.92,93.26,46.28,60.02,94.68,94.67,91.92,94.59,94.46,81.65,47.85,49.66,50.06,51.19,80.94,93.71,100.0,94.81,97.25,95.995,94.36,96.14,96.82,96.38,96.47,99.82,91.0175,99.7833333333,46.56,63.77,96.06,99.79,93.405,96.5,96.41,80.8,47.65,49.11,50.36,51.05,85.67,94.85,94.81,100.0,94.26,89.065,94.28,95.3,94.41,95.37,95.14,94.26,93.38,91.6766666667,49.12,63.67,95.02,94.27,94.915,94.77,94.65,85.55,50.46,51.65,52.31,54.25,84.89,94.43,97.25,94.26,100.0,96.685,93.64,96.1,96.88,95.97,96.89,97.18,96.7925,97.0233333333,49.27,66.65,96.42,97.2,92.85,96.64,96.54,84.74,49.95,51.66,52.32,53.72,51.205,93.03,95.995,89.065,96.685,60.315,92.61,96.905,96.7,95.89,97.965,95.975,69.4675,57.7466666667,51.925,79.015,96.835,96.02,81.315,96.7,96.605,53.1,50.625,38.245,50.62,52.315,85.54,98.47,94.36,94.28,93.64,92.61,100.0,94.71,94.14,94.39,94.12,93.97,93.1675,93.27,49.52,63.43,94.1,93.99,95.33,93.74,93.63,85.42,50.58,51.85,53.0,54.27,86.03,94.69,96.14,95.3,96.1,96.905,94.71,100.0,96.19,97.91,97.25,95.87,96.845,95.9,49.04,65.19,96.67,95.8,96.28,96.84,96.72,85.83,50.16,51.63,52.68,54.27,85.4,94.73,96.82,94.41,96.88,96.7,94.14,96.19,100.0,96.12,96.46,96.88,96.3,96.5933333333,48.58,66.09,96.23,96.85,93.21,96.71,96.62,85.19,49.69,52.25,52.52,53.74,85.79,94.87,96.38,95.37,95.97,95.89,94.39,97.91,96.12,100.0,96.85,95.79,96.6425,95.58,48.94,65.37,96.23,95.72,92.84,96.47,96.37,85.5,49.95,51.59,52.56,54.21,85.59,94.83,96.47,95.14,96.89,97.965,94.12,97.25,96.46,96.85,100.0,96.5,98.165,96.5033333333,49.0,65.9,98.11,96.45,93.54,97.65,97.6,85.35,49.91,51.5,52.37,53.96,85.16,94.62,99.82,94.26,97.18,95.975,93.97,95.87,96.88,95.79,96.5,100.0,96.3825,99.7933333333,48.74,67.51,96.11,99.89,93.39,96.74,96.66,85.02,49.61,51.64,52.45,53.42,84.99,88.92,91.0175,93.38,96.7925,69.4675,93.1675,96.845,96.3,96.6425,98.165,96.3825,48.0325,77.58,56.39,82.835,96.785,96.42,45.6925,98.3425,98.055,85.0425,54.1425,51.9125,56.0175,56.5425,63.7133333333,93.26,99.7833333333,91.6766666667,97.0233333333,57.4616666667,93.27,95.9,96.5933333333,95.58,96.5033333333,99.7933333333,77.5575,64.1866666667,52.5433333333,75.0466666667,95.4033333333,99.7666666667,73.9733333333,96.3433333333,96.2966666667,63.7433333333,51.2,43.2366666667,52.0833333333,53.4866666667,54.88,46.28,46.56,49.12,49.27,51.925,49.52,49.04,48.58,48.94,49.0,48.74,56.39,52.5433333333,100.0,32.96,48.72,48.62,63.525,48.91,49.13,54.57,58.68,65.05,62.15,65.14,54.1,60.02,63.77,63.67,66.65,79.015,63.43,65.19,66.09,65.37,65.9,67.51,82.835,75.0466666667,32.96,100.0,65.48,67.31,93.235,66.03,65.74,54.29,33.67,32.52,36.1,36.25,85.65,94.68,96.06,95.02,96.42,96.835,94.1,96.67,96.23,96.23,98.11,96.11,96.785,95.4033333333,48.72,65.48,100.0,96.08,92.345,97.23,97.15,85.45,49.88,51.58,52.27,53.77,85.1,94.67,99.79,94.27,97.2,96.02,93.99,95.8,96.85,95.72,96.45,99.89,96.42,99.7666666667,48.62,67.31,96.08,100.0,93.32,96.68,96.61,85.01,49.52,51.58,52.29,53.29,82.46,91.92,93.405,94.915,92.85,81.315,95.33,96.28,93.21,92.84,93.54,93.39,46.25375,74.7666666667,63.525,93.235,92.345,93.32,65.825,92.15,89.03,89.715,59.565,49.575,66.455,62.485,85.41,94.59,96.5,94.77,96.64,96.7,93.74,96.84,96.71,96.47,97.65,96.74,98.3425,96.3433333333,48.91,66.03,97.23,96.68,92.15,100.0,99.54,85.25,49.69,51.55,51.99,53.42,85.32,94.46,96.41,94.65,96.54,96.605,93.63,96.72,96.62,96.37,97.6,96.66,98.055,96.2966666667,49.13,65.74,97.15,96.61,89.03,99.54,100.0,85.12,49.77,51.78,52.05,53.51,88.67,81.65,80.8,85.55,84.74,53.1,85.42,85.83,85.19,85.5,85.35,85.02,85.0425,63.7433333333,54.57,54.29,85.45,85.01,89.715,85.25,85.12,100.0,52.99,51.56,54.56,56.21,52.97,47.85,47.65,50.46,49.95,50.625,50.58,50.16,49.69,49.95,49.91,49.61,54.1425,51.2,58.68,33.67,49.88,49.52,59.565,49.69,49.77,52.99,100.0,60.96,58.76,63.13,51.78,49.66,49.11,51.65,51.66,38.245,51.85,51.63,52.25,51.59,51.5,51.64,51.9125,43.2366666667,65.05,32.52,51.58,51.58,49.575,51.55,51.78,51.56,60.96,100.0,63.57,67.15,54.7,50.06,50.36,52.31,52.32,50.62,53.0,52.68,52.52,52.56,52.37,52.45,56.0175,52.0833333333,62.15,36.1,52.27,52.29,66.455,51.99,52.05,54.56,58.76,63.57,100.0,67.29,56.28,51.19,51.05,54.25,53.72,52.315,54.27,54.27,53.74,54.21,53.96,53.42,56.5425,53.4866666667,65.14,36.25,53.77,53.29,62.485,53.42,53.51,56.21,63.13,67.15,67.29,100.0]
        #######################

                # Note: a bitscoreVec is a vector of floats representing %identity to every other mz

    fi = open(PercAvgAll_path)

    mz_to_bitscoreVec = {}

    headers = fi.readline() # species name as headers for the %id columns 'AAEGLAAEGL,AAEGLAALBS,AAEGLAARAD,AAEGLAATRE,AAEGLACHRA,AAEGLACULA,AAEGLADARC,AAEGLADIRW,AAEGLAEPIE,AAEGLAFARF,AAEGLAFUNF,AAEGLAGAMP,AAEGLAMACM,AAEGLAMELC,AAEGLAMELL,AAEGLAMERM,AAEGLAMINM,AAEGLAQUAS,AAEGLASINS,AAEGLASTEI,AAEGLASTES,AAEGLCPIPJ,AAEGLDMEL5,AAEGLDPLEX,AAEGLPHUMU,AAEGLTCAST,AALBSAAEGL,AALBSAALBS,AALBSAARAD,AALBSAATRE,AALBSACHRA,AALBSACULA,AALBSADARC,AALBSADIRW,AALBSAEPIE,AALBSAFARF,AALBSAFUNF,AALBSAGAMP,AALBSAMACM,AALBSAMELC,AALBSAMELL,AALBSAMERM,AALBSAMINM,AALBSAQUAS,AALBSASINS,AALBSASTEI,AALBSASTES,AALBSCPIPJ,AALBSDMEL5,AALBSDPLEX,AALBSPHUMU,AALBSTCAST,AARADAAEGL,AARADAALBS,AARADAARAD,AARADAATRE,AARADACHRA,AARADACULA,AARADADARC,AARADADIRW,AARADAEPIE,AARADAFARF,AARADAFUNF,AARADAGAMP,AARADAMACM,AARADAMELC,AARADAMELL,AARADAMERM,AARADAMINM,AARADAQUAS,AARADASINS,AARADASTEI,AARADASTES,AARADCPIPJ,AARADDMEL5,AARADDPLEX,AARADPHUMU,AARADTCAST,AATREAAEGL,AATREAALBS,AATREAARAD,AATREAATRE,AATREACHRA,AATREACULA,AATREADARC,AATREADIRW,AATREAEPIE,AATREAFARF,AATREAFUNF,AATREAGAMP,AATREAMACM,AATREAMELC,AATREAMELL,AATREAMERM,AATREAMINM,AATREAQUAS,AATREASINS,AATREASTEI,AATREASTES,AATRECPIPJ,AATREDMEL5,AATREDPLEX,AATREPHUMU,AATRETCAST,ACHRAAAEGL,ACHRAAALBS,ACHRAAARAD,ACHRAAATRE,ACHRAACHRA,ACHRAACULA,ACHRAADARC,ACHRAADIRW,ACHRAAEPIE,ACHRAAFARF,ACHRAAFUNF,ACHRAAGAMP,ACHRAAMACM,ACHRAAMELC,ACHRAAMELL,ACHRAAMERM,ACHRAAMINM,ACHRAAQUAS,ACHRAASINS,ACHRAASTEI,ACHRAASTES,ACHRACPIPJ,ACHRADMEL5,ACHRADPLEX,ACHRAPHUMU,ACHRATCAST,ACULAAAEGL,ACULAAALBS,ACULAAARAD,ACULAAATRE,ACULAACHRA,ACULAACULA,ACULAADARC,ACULAADIRW,ACULAAEPIE,ACULAAFARF,ACULAAFUNF,ACULAAGAMP,ACULAAMACM,ACULAAMELC,ACULAAMELL,ACULAAMERM,ACULAAMINM,ACULAAQUAS,ACULAASINS,ACULAASTEI,ACULAASTES,ACULACPIPJ,ACULADMEL5,ACULADPLEX,ACULAPHUMU,ACULATCAST,ADARCAAEGL,ADARCAALBS,ADARCAARAD,ADARCAATRE,ADARCACHRA,ADARCACULA,ADARCADARC,ADARCADIRW,ADARCAEPIE,ADARCAFARF,ADARCAFUNF,ADARCAGAMP,ADARCAMACM,ADARCAMELC,ADARCAMELL,ADARCAMERM,ADARCAMINM,ADARCAQUAS,ADARCASINS,ADARCASTEI,ADARCASTES,ADARCCPIPJ,ADARCDMEL5,ADARCDPLEX,ADARCPHUMU,ADARCTCAST,ADIRWAAEGL,ADIRWAALBS,ADIRWAARAD,ADIRWAATRE,ADIRWACHRA,ADIRWACULA,ADIRWADARC,ADIRWADIRW,ADIRWAEPIE,ADIRWAFARF,ADIRWAFUNF,ADIRWAGAMP,ADIRWAMACM,ADIRWAMELC,ADIRWAMELL,ADIRWAMERM,ADIRWAMINM,ADIRWAQUAS,ADIRWASINS,ADIRWASTEI,ADIRWASTES,ADIRWCPIPJ,ADIRWDMEL5,ADIRWDPLEX,ADIRWPHUMU,ADIRWTCAST,AEPIEAAEGL,AEPIEAALBS,AEPIEAARAD,AEPIEAATRE,AEPIEACHRA,AEPIEACULA,AEPIEADARC,AEPIEADIRW,AEPIEAEPIE,AEPIEAFARF,AEPIEAFUNF,AEPIEAGAMP,AEPIEAMACM,AEPIEAMELC,AEPIEAMELL,AEPIEAMERM,AEPIEAMINM,AEPIEAQUAS,AEPIEASINS,AEPIEASTEI,AEPIEASTES,AEPIECPIPJ,AEPIEDMEL5,AEPIEDPLEX,AEPIEPHUMU,AEPIETCAST,AFARFAAEGL,AFARFAALBS,AFARFAARAD,AFARFAATRE,AFARFACHRA,AFARFACULA,AFARFADARC,AFARFADIRW,AFARFAEPIE,AFARFAFARF,AFARFAFUNF,AFARFAGAMP,AFARFAMACM,AFARFAMELC,AFARFAMELL,AFARFAMERM,AFARFAMINM,AFARFAQUAS,AFARFASINS,AFARFASTEI,AFARFASTES,AFARFCPIPJ,AFARFDMEL5,AFARFDPLEX,AFARFPHUMU,AFARFTCAST,AFUNFAAEGL,AFUNFAALBS,AFUNFAARAD,AFUNFAATRE,AFUNFACHRA,AFUNFACULA,AFUNFADARC,AFUNFADIRW,AFUNFAEPIE,AFUNFAFARF,AFUNFAFUNF,AFUNFAGAMP,AFUNFAMACM,AFUNFAMELC,AFUNFAMELL,AFUNFAMERM,AFUNFAMINM,AFUNFAQUAS,AFUNFASINS,AFUNFASTEI,AFUNFASTES,AFUNFCPIPJ,AFUNFDMEL5,AFUNFDPLEX,AFUNFPHUMU,AFUNFTCAST,AGAMPAAEGL,AGAMPAALBS,AGAMPAARAD,AGAMPAATRE,AGAMPACHRA,AGAMPACULA,AGAMPADARC,AGAMPADIRW,AGAMPAEPIE,AGAMPAFARF,AGAMPAFUNF,AGAMPAGAMP,AGAMPAMACM,AGAMPAMELC,AGAMPAMELL,AGAMPAMERM,AGAMPAMINM,AGAMPAQUAS,AGAMPASINS,AGAMPASTEI,AGAMPASTES,AGAMPCPIPJ,AGAMPDMEL5,AGAMPDPLEX,AGAMPPHUMU,AGAMPTCAST,AMACMAAEGL,AMACMAALBS,AMACMAARAD,AMACMAATRE,AMACMACHRA,AMACMACULA,AMACMADARC,AMACMADIRW,AMACMAEPIE,AMACMAFARF,AMACMAFUNF,AMACMAGAMP,AMACMAMACM,AMACMAMELC,AMACMAMELL,AMACMAMERM,AMACMAMINM,AMACMAQUAS,AMACMASINS,AMACMASTEI,AMACMASTES,AMACMCPIPJ,AMACMDMEL5,AMACMDPLEX,AMACMPHUMU,AMACMTCAST,AMELCAAEGL,AMELCAALBS,AMELCAARAD,AMELCAATRE,AMELCACHRA,AMELCACULA,AMELCADARC,AMELCADIRW,AMELCAEPIE,AMELCAFARF,AMELCAFUNF,AMELCAGAMP,AMELCAMACM,AMELCAMELC,AMELCAMELL,AMELCAMERM,AMELCAMINM,AMELCAQUAS,AMELCASINS,AMELCASTEI,AMELCASTES,AMELCCPIPJ,AMELCDMEL5,AMELCDPLEX,AMELCPHUMU,AMELCTCAST,AMELLAAEGL,AMELLAALBS,AMELLAARAD,AMELLAATRE,AMELLACHRA,AMELLACULA,AMELLADARC,AMELLADIRW,AMELLAEPIE,AMELLAFARF,AMELLAFUNF,AMELLAGAMP,AMELLAMACM,AMELLAMELC,AMELLAMELL,AMELLAMERM,AMELLAMINM,AMELLAQUAS,AMELLASINS,AMELLASTEI,AMELLASTES,AMELLCPIPJ,AMELLDMEL5,AMELLDPLEX,AMELLPHUMU,AMELLTCAST,AMERMAAEGL,AMERMAALBS,AMERMAARAD,AMERMAATRE,AMERMACHRA,AMERMACULA,AMERMADARC,AMERMADIRW,AMERMAEPIE,AMERMAFARF,AMERMAFUNF,AMERMAGAMP,AMERMAMACM,AMERMAMELC,AMERMAMELL,AMERMAMERM,AMERMAMINM,AMERMAQUAS,AMERMASINS,AMERMASTEI,AMERMASTES,AMERMCPIPJ,AMERMDMEL5,AMERMDPLEX,AMERMPHUMU,AMERMTCAST,AMINMAAEGL,AMINMAALBS,AMINMAARAD,AMINMAATRE,AMINMACHRA,AMINMACULA,AMINMADARC,AMINMADIRW,AMINMAEPIE,AMINMAFARF,AMINMAFUNF,AMINMAGAMP,AMINMAMACM,AMINMAMELC,AMINMAMELL,AMINMAMERM,AMINMAMINM,AMINMAQUAS,AMINMASINS,AMINMASTEI,AMINMASTES,AMINMCPIPJ,AMINMDMEL5,AMINMDPLEX,AMINMPHUMU,AMINMTCAST,AQUASAAEGL,AQUASAALBS,AQUASAARAD,AQUASAATRE,AQUASACHRA,AQUASACULA,AQUASADARC,AQUASADIRW,AQUASAEPIE,AQUASAFARF,AQUASAFUNF,AQUASAGAMP,AQUASAMACM,AQUASAMELC,AQUASAMELL,AQUASAMERM,AQUASAMINM,AQUASAQUAS,AQUASASINS,AQUASASTEI,AQUASASTES,AQUASCPIPJ,AQUASDMEL5,AQUASDPLEX,AQUASPHUMU,AQUASTCAST,ASINSAAEGL,ASINSAALBS,ASINSAARAD,ASINSAATRE,ASINSACHRA,ASINSACULA,ASINSADARC,ASINSADIRW,ASINSAEPIE,ASINSAFARF,ASINSAFUNF,ASINSAGAMP,ASINSAMACM,ASINSAMELC,ASINSAMELL,ASINSAMERM,ASINSAMINM,ASINSAQUAS,ASINSASINS,ASINSASTEI,ASINSASTES,ASINSCPIPJ,ASINSDMEL5,ASINSDPLEX,ASINSPHUMU,ASINSTCAST,ASTEIAAEGL,ASTEIAALBS,ASTEIAARAD,ASTEIAATRE,ASTEIACHRA,ASTEIACULA,ASTEIADARC,ASTEIADIRW,ASTEIAEPIE,ASTEIAFARF,ASTEIAFUNF,ASTEIAGAMP,ASTEIAMACM,ASTEIAMELC,ASTEIAMELL,ASTEIAMERM,ASTEIAMINM,ASTEIAQUAS,ASTEIASINS,ASTEIASTEI,ASTEIASTES,ASTEICPIPJ,ASTEIDMEL5,ASTEIDPLEX,ASTEIPHUMU,ASTEITCAST,ASTESAAEGL,ASTESAALBS,ASTESAARAD,ASTESAATRE,ASTESACHRA,ASTESACULA,ASTESADARC,ASTESADIRW,ASTESAEPIE,ASTESAFARF,ASTESAFUNF,ASTESAGAMP,ASTESAMACM,ASTESAMELC,ASTESAMELL,ASTESAMERM,ASTESAMINM,ASTESAQUAS,ASTESASINS,ASTESASTEI,ASTESASTES,ASTESCPIPJ,ASTESDMEL5,ASTESDPLEX,ASTESPHUMU,ASTESTCAST,CPIPJAAEGL,CPIPJAALBS,CPIPJAARAD,CPIPJAATRE,CPIPJACHRA,CPIPJACULA,CPIPJADARC,CPIPJADIRW,CPIPJAEPIE,CPIPJAFARF,CPIPJAFUNF,CPIPJAGAMP,CPIPJAMACM,CPIPJAMELC,CPIPJAMELL,CPIPJAMERM,CPIPJAMINM,CPIPJAQUAS,CPIPJASINS,CPIPJASTEI,CPIPJASTES,CPIPJCPIPJ,CPIPJDMEL5,CPIPJDPLEX,CPIPJPHUMU,CPIPJTCAST,DMEL5AAEGL,DMEL5AALBS,DMEL5AARAD,DMEL5AATRE,DMEL5ACHRA,DMEL5ACULA,DMEL5ADARC,DMEL5ADIRW,DMEL5AEPIE,DMEL5AFARF,DMEL5AFUNF,DMEL5AGAMP,DMEL5AMACM,DMEL5AMELC,DMEL5AMELL,DMEL5AMERM,DMEL5AMINM,DMEL5AQUAS,DMEL5ASINS,DMEL5ASTEI,DMEL5ASTES,DMEL5CPIPJ,DMEL5DMEL5,DMEL5DPLEX,DMEL5PHUMU,DMEL5TCAST,DPLEXAAEGL,DPLEXAALBS,DPLEXAARAD,DPLEXAATRE,DPLEXACHRA,DPLEXACULA,DPLEXADARC,DPLEXADIRW,DPLEXAEPIE,DPLEXAFARF,DPLEXAFUNF,DPLEXAGAMP,DPLEXAMACM,DPLEXAMELC,DPLEXAMELL,DPLEXAMERM,DPLEXAMINM,DPLEXAQUAS,DPLEXASINS,DPLEXASTEI,DPLEXASTES,DPLEXCPIPJ,DPLEXDMEL5,DPLEXDPLEX,DPLEXPHUMU,DPLEXTCAST,PHUMUAAEGL,PHUMUAALBS,PHUMUAARAD,PHUMUAATRE,PHUMUACHRA,PHUMUACULA,PHUMUADARC,PHUMUADIRW,PHUMUAEPIE,PHUMUAFARF,PHUMUAFUNF,PHUMUAGAMP,PHUMUAMACM,PHUMUAMELC,PHUMUAMELL,PHUMUAMERM,PHUMUAMINM,PHUMUAQUAS,PHUMUASINS,PHUMUASTEI,PHUMUASTES,PHUMUCPIPJ,PHUMUDMEL5,PHUMUDPLEX,PHUMUPHUMU,PHUMUTCAST,TCASTAAEGL,TCASTAALBS,TCASTAARAD,TCASTAATRE,TCASTACHRA,TCASTACULA,TCASTADARC,TCASTADIRW,TCASTAEPIE,TCASTAFARF,TCASTAFUNF,TCASTAGAMP,TCASTAMACM,TCASTAMELC,TCASTAMELL,TCASTAMERM,TCASTAMINM,TCASTAQUAS,TCASTASINS,TCASTASTEI,TCASTASTES,TCASTCPIPJ,TCASTDMEL5,TCASTDPLEX,TCASTPHUMU,TCASTTCAST\r\n'

    while True:
        
        line = fi.readline()

        line_split = line.rstrip().split(',')

        mzId       = line_split[0]                      # e.g. ['MZ20100000']
        bitscores  = [float(i) for i in line_split[1:]] # e.g. [100.0,81.71,80.94,85.67,84.89,51.95,85.54,86.03,85.4,85.79,85.59,85.16,84.99,63.7133333333,54.88,54.1,85.65,85.1,82.46,85.41,85.32,88.67,52.97,51.78,54.7,56.28,81.71,100.0,93.71,94.85,94.43,93.03,98.47,94.69,94.73,94.87,94.83,94.62,88.92,93.26,46.28,60.02,94.68,94.67,91.92,94.59,94.46,81.65,47.85,49.66,50.06,51.19,80.94,93.71,100.0,94.81,97.25,95.995,94.36,96.14,96.82,96.38,96.47,99.82,91.0175,99.7833333333,46.56,63.77,96.06,99.79,93.405,96.5,96.41,80.8,47.65,49.11,50.36,51.05,85.67,94.85,94.81,100.0,94.26,89.065,94.28,95.3,94.41,95.37,95.14,94.26,93.38,91.6766666667,49.12,63.67,95.02,94.27,94.915,94.77,94.65,85.55,50.46,51.65,52.31,54.25,84.89,94.43,97.25,94.26,100.0,96.685,93.64,96.1,96.88,95.97,96.89,97.18,96.7925,97.0233333333,49.27,66.65,96.42,97.2,92.85,96.64,96.54,84.74,49.95,51.66,52.32,53.72,51.205,93.03,95.995,89.065,96.685,60.315,92.61,96.905,96.7,95.89,97.965,95.975,69.4675,57.7466666667,51.925,79.015,96.835,96.02,81.315,96.7,96.605,53.1,50.625,38.245,50.62,52.315,85.54,98.47,94.36,94.28,93.64,92.61,100.0,94.71,94.14,94.39,94.12,93.97,93.1675,93.27,49.52,63.43,94.1,93.99,95.33,93.74,93.63,85.42,50.58,51.85,53.0,54.27,86.03,94.69,96.14,95.3,96.1,96.905,94.71,100.0,96.19,97.91,97.25,95.87,96.845,95.9,49.04,65.19,96.67,95.8,96.28,96.84,96.72,85.83,50.16,51.63,52.68,54.27,85.4,94.73,96.82,94.41,96.88,96.7,94.14,96.19,100.0,96.12,96.46,96.88,96.3,96.5933333333,48.58,66.09,96.23,96.85,93.21,96.71,96.62,85.19,49.69,52.25,52.52,53.74,85.79,94.87,96.38,95.37,95.97,95.89,94.39,97.91,96.12,100.0,96.85,95.79,96.6425,95.58,48.94,65.37,96.23,95.72,92.84,96.47,96.37,85.5,49.95,51.59,52.56,54.21,85.59,94.83,96.47,95.14,96.89,97.965,94.12,97.25,96.46,96.85,100.0,96.5,98.165,96.5033333333,49.0,65.9,98.11,96.45,93.54,97.65,97.6,85.35,49.91,51.5,52.37,53.96,85.16,94.62,99.82,94.26,97.18,95.975,93.97,95.87,96.88,95.79,96.5,100.0,96.3825,99.7933333333,48.74,67.51,96.11,99.89,93.39,96.74,96.66,85.02,49.61,51.64,52.45,53.42,84.99,88.92,91.0175,93.38,96.7925,69.4675,93.1675,96.845,96.3,96.6425,98.165,96.3825,48.0325,77.58,56.39,82.835,96.785,96.42,45.6925,98.3425,98.055,85.0425,54.1425,51.9125,56.0175,56.5425,63.7133333333,93.26,99.7833333333,91.6766666667,97.0233333333,57.4616666667,93.27,95.9,96.5933333333,95.58,96.5033333333,99.7933333333,77.5575,64.1866666667,52.5433333333,75.0466666667,95.4033333333,99.7666666667,73.9733333333,96.3433333333,96.2966666667,63.7433333333,51.2,43.2366666667,52.0833333333,53.4866666667,54.88,46.28,46.56,49.12,49.27,51.925,49.52,49.04,48.58,48.94,49.0,48.74,56.39,52.5433333333,100.0,32.96,48.72,48.62,63.525,48.91,49.13,54.57,58.68,65.05,62.15,65.14,54.1,60.02,63.77,63.67,66.65,79.015,63.43,65.19,66.09,65.37,65.9,67.51,82.835,75.0466666667,32.96,100.0,65.48,67.31,93.235,66.03,65.74,54.29,33.67,32.52,36.1,36.25,85.65,94.68,96.06,95.02,96.42,96.835,94.1,96.67,96.23,96.23,98.11,96.11,96.785,95.4033333333,48.72,65.48,100.0,96.08,92.345,97.23,97.15,85.45,49.88,51.58,52.27,53.77,85.1,94.67,99.79,94.27,97.2,96.02,93.99,95.8,96.85,95.72,96.45,99.89,96.42,99.7666666667,48.62,67.31,96.08,100.0,93.32,96.68,96.61,85.01,49.52,51.58,52.29,53.29,82.46,91.92,93.405,94.915,92.85,81.315,95.33,96.28,93.21,92.84,93.54,93.39,46.25375,74.7666666667,63.525,93.235,92.345,93.32,65.825,92.15,89.03,89.715,59.565,49.575,66.455,62.485,85.41,94.59,96.5,94.77,96.64,96.7,93.74,96.84,96.71,96.47,97.65,96.74,98.3425,96.3433333333,48.91,66.03,97.23,96.68,92.15,100.0,99.54,85.25,49.69,51.55,51.99,53.42,85.32,94.46,96.41,94.65,96.54,96.605,93.63,96.72,96.62,96.37,97.6,96.66,98.055,96.2966666667,49.13,65.74,97.15,96.61,89.03,99.54,100.0,85.12,49.77,51.78,52.05,53.51,88.67,81.65,80.8,85.55,84.74,53.1,85.42,85.83,85.19,85.5,85.35,85.02,85.0425,63.7433333333,54.57,54.29,85.45,85.01,89.715,85.25,85.12,100.0,52.99,51.56,54.56,56.21,52.97,47.85,47.65,50.46,49.95,50.625,50.58,50.16,49.69,49.95,49.91,49.61,54.1425,51.2,58.68,33.67,49.88,49.52,59.565,49.69,49.77,52.99,100.0,60.96,58.76,63.13,51.78,49.66,49.11,51.65,51.66,38.245,51.85,51.63,52.25,51.59,51.5,51.64,51.9125,43.2366666667,65.05,32.52,51.58,51.58,49.575,51.55,51.78,51.56,60.96,100.0,63.57,67.15,54.7,50.06,50.36,52.31,52.32,50.62,53.0,52.68,52.52,52.56,52.37,52.45,56.0175,52.0833333333,62.15,36.1,52.27,52.29,66.455,51.99,52.05,54.56,58.76,63.57,100.0,67.29,56.28,51.19,51.05,54.25,53.72,52.315,54.27,54.27,53.74,54.21,53.96,53.42,56.5425,53.4866666667,65.14,36.25,53.77,53.29,62.485,53.42,53.51,56.21,63.13,67.15,67.29,100.0]

        if line == '':
            break

        mz_to_bitscoreVec[mzId] = bitscores # key:value 

    fi.close()

        ########################
        # Pull out only the mz:bitscoreVec pairs that satisfy the condition: "transcription factors w/ no paralogues", i.e. transcription_factor_mzIds_with_no_paralogues
        ########################

    mzTF_to_bitscoreVec = {}   

    for mz in transcription_factor_mzIds_with_no_paralogues:

        bitscoreVec = mz_to_bitscoreVec[mz]     

        mzTF_to_bitscoreVec[mz] = bitscoreVec


        ########################
        # Unite all bitscore vectors into a single nested list
        ########################    

    bitscoreVecs = []
    bitscoreVecs_noZeros = []

    for mz in mzTF_to_bitscoreVec.keys():

        vec         = mzTF_to_bitscoreVec[mz]

        vec_noZeros = [i for i in vec if i != 0] # 0s removed as they artificially mean "this OG is not present in this species"
        
        ag          = mz_to_ag[mz]

        pc = mz_to_pc[mz]
        
        nTfs = len([i for i in pc if i>=1])

        bitscoreVecs.append([mz,vec,np.median(vec),ag,nTfs])                            # medians not means
        bitscoreVecs_noZeros.append([mz,vec_noZeros,np.median(vec_noZeros),ag,nTfs])    # ^

        ################################
        # Finishing touches to the data
        ################################

    # sort the vectors by their means 
    bitscoreVecs = sorted(bitscoreVecs, key=itemgetter(2), reverse = True)  # sort bitscoreVecs by their means
    #   note: bitscoreVec[0] = [ mz, vec, np.mean(vec), ag ]
    bitscoreVecs_noZeros = sorted(bitscoreVecs_noZeros, key=itemgetter(2), reverse = True)  # sort bitscoreVecs by their means
    # # purge out all 0s from the bitscore vectors <= since 0s are artificially introduced, they mean "this OG is not present in this species"
    # for vec in bitscoreVecs:
    #     bitscoreVec = vec[1]
    #     if 0 in bitscoreVec:
    #         vec[1].remove(0)        # e.g. vec[1] = [0,0.95,0.2,0,0,0,...] # %identity vector


        ##############
        # Pickle data
        ##############
    bitscoreVecs_bitscoreVecs_noZeros = [bitscoreVecs,bitscoreVecs_noZeros]

    f = open('data_in_transcription_factor_OG_boxplots.p','wb')
    pickle.dump(bitscoreVecs_bitscoreVecs_noZeros,f)
    f.close()






#######################
# Plots
#######################
# Key:
# bitscoreVecs[0][0] # mz
# bitscoreVecs[0][1] # vec
# bitscoreVecs[0][2] # mean
# bitscoreVecs[0][3] # vec_noZeros
# bitscoreVecs[0][4] # nTfs


# NOTE: bitscoreVecs and bitscoreVecs_noZeros are obtained by line: CTRL+F: "bitscoreVecs,bitscoreVecs_noZeros = pickle.load( f )"

data1_wZeros   = [vec for (mz,vec,mean,ag,nTfs) in bitscoreVecs]
data2_wZeros   = [nTfs for (mz,vec,mean,ag,nTfs) in bitscoreVecs]
labels_wZeros  = [ag for (mz,vec,mean,ag,nTfs) in bitscoreVecs]
save_wZeros    = './boxcompare_TF_AGAP_OG_percId_wZeors.png'
debug1 = boxplot_tfs(data1_wZeros,data2_wZeros,labels_wZeros,save_wZeros)


data1       = [vec for (mz,vec,mean,ag,nTfs) in bitscoreVecs_noZeros]
data2       = [nTfs for (mz,vec,mean,ag,nTfs) in bitscoreVecs_noZeros]
labels      = [ag for (mz,vec,mean,ag,nTfs) in bitscoreVecs_noZeros]
save        = './boxcompare_TF_AGAP_OG_percId_noZeors.png'
debug2 = boxplot_tfs(data1,data2,labels,save)

